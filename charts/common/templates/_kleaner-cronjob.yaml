{{/*
Builds a cronjob to clean specified filesystem paths.
@param .context   The caller's context
@param .args      The parameters for the cleaner cronjob. The template expects the following:
  - name            The name to give to the cronjob
  - cron            The schedule expression "0 * * * *"
  - cleanupPaths    A string with all the paths to scan (can be template)
  - olderThanDays   A file must be older than this to be deleted
  - volumeMounts    The list of volumeMounts for the cleanup container
  - volumes         The list of volumes to back volumeMounts
  - dryRun          A bool to enable dryrun cleanup (will only print matching files)
*/}}
{{- define "common.filesystem-kleaner-cronjob" -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .context.Release.Name }}-{{ .args.name }}
  namespace: {{ .context.Release.Namespace | quote }}
spec:
  schedule: "{{ .args.cron }}"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: {{ .args.name }}
              image: busybox
              command:
                - sh
                - -c
                - for CLEANUP_PATH in {{ include "common.tplvalues.render" ( dict "value" .args.cleanupPaths "context" .context) }}; do find $CLEANUP_PATH -type f -mtime +{{ .args.olderThanDays }} -print && find $CLEANUP_PATH -type d -mtime +2 -empty -print {{ if not (default false .args.dryRun) }}-delete{{ end }} ; done
              {{- if .args.volumeMounts }}
              volumeMounts:
                {{- include "common.tplvalues.render" ( dict "value" .args.volumeMounts "context" .context ) | nindent 14 }}
              {{- end }}
          restartPolicy: Never
          {{- if .args.volumes }}
          volumes:
            {{- include "common.tplvalues.render" ( dict "value" .args.volumes "context" .context ) | nindent 10 }}
          {{- end }}
{{- end -}}


{{/*
Builds a cronjob to clean specified object storage paths.
@param .context   The caller's context
@param .args      The parameters for the cleaner cronjob. The template expects the following:
  - name                The name to give to the cronjob
  - cron                The schedule expression "0 * * * *"
  - rcloneSecret        The name of the secret where rclone.conf can be found
  - cleanupPaths        A string with all the paths to scan (can be template)
  - olderThanDays       A file must be older than this to be deleted
  - dryRun              A bool to enable dryrun cleanup (will only print matching files)
*/}}
{{- define "common.rclone-kleaner-cronjob" -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .context.Release.Name }}-{{ .args.name }}
  namespace: {{ .context.Release.Namespace | quote }}
spec:
  schedule: "{{ .args.cron }}"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: {{ .args.name }}
              image: rclone/rclone
              command:
                - sh
                - -c
                - for CLEANUP_PATH in {{ include "common.tplvalues.render" ( dict "value" .args.cleanupPaths "context" .context) }}; do rclone --min-age {{ .args.olderThanDays }}d {{ if default false .args.dryRun }}--dry-run{{ end }} delete $CLEANUP_PATH --rmdirs; done
              volumeMounts:
                - mountPath: /config/rclone/rclone.conf
                  name: rclone-config
                  subPath: rclone.conf
                  readOnly: true
          restartPolicy: Never
          volumes:
            - name: rclone-config
              secret:
                secretName: {{ include "common.tplvalues.render" ( dict "value" .args.rcloneSecret "context" .context) }}
{{- end -}}
