{{- define "common.secret" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "common.names.secret" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
type: Opaque
data:
  {{- range $key, $val := .Values.secret }}
  {{ $key }}: {{ include "common.tplvalues.render" (dict "value" $val "context" $) | b64enc }}
  {{- end}}
{{- end -}}

{{/*
Builds a secret from all the files in a folder. Files can be templated.
@parap .context   The caller's context
@param .name      The name for the created secret
@param .folder    The folder to scan to create the secret
*/}}
{{- define "common.secret.fromFolder" -}}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .name }}
  namespace: {{ .context.Release.Namespace }}
data:
{{- range $path, $_ := (.context.Files.Glob (printf "%s/*" .folder)) }}
  {{ trimPrefix (printf "%s/" $.folder) $path }}: |
    {{- tpl ($.context.Files.Get $path) $.context | b64enc | nindent 4 }}
{{- end }}
{{- end -}}
