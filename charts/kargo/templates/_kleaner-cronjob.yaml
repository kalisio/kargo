{{/*
Builds a cronjob to clean specified filesystem paths.
@param .context   The caller's context
@param .args      The parameters for the cleaner cronjob. The template expects the following:
  - name            The name to give to the cronjob
  - cron            The schedule expression "0 * * * *"
  - suspend         True to make a suspended by default cronjob (false if not provided)
  - cleanupPaths    A string with all the paths to scan (can be template)
  - olderThanDays   A file must be older than this to be deleted
  - volumeMounts    The list of volumeMounts for the cleanup container
  - volumes         The list of volumes to back volumeMounts
  - dryRun          A bool to enable dryrun cleanup (will only print matching files)
  - image           An object defining the image to pull, cf. kargo.images.image template
*/}}
{{- define "kargo.filesystem-kleaner-cronjob" -}}
apiVersion: {{ .context.Capabilities.APIVersions.Has "batch/v1" | ternary "batch/v1" "batch/v1beta1" }}
kind: CronJob
metadata:
  name: {{ .args.name }}
  namespace: {{ .context.Release.Namespace | quote }}
spec:
  suspend: {{ .args.suspend | default false }}
  schedule: "{{ .args.cron }}"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 3600
      template:
        spec:
          {{- include "kargo.images.pullSecrets" (dict "images" (list .args.image) "context" .context) | indent 10 }}
          containers:
            - name: {{ .args.name }}
              image: {{ include "kargo.images.image" ( dict "imageRoot" .args.image "global" .context ) }}
              command:
                - /bin/sh
              args:
                - -c
                - for CLEANUP_PATH in {{ include "kargo.tplvalues.render" ( dict "value" .args.cleanupPaths "context" .context) }}; do if [ -d $CLEANUP_PATH ]; then find $CLEANUP_PATH -type f -mtime +{{ .args.olderThanDays }} -print {{ if not (default false .args.dryRun) }}-delete{{ end }} && find $CLEANUP_PATH -type d -mtime +2 -empty -print {{ if not (default false .args.dryRun) }}-delete{{ end }} ; fi ; done
              {{- if .args.volumeMounts }}
              volumeMounts:
                {{- include "kargo.tplvalues.render" ( dict "value" .args.volumeMounts "context" .context ) | nindent 14 }}
              {{- end }}
          restartPolicy: Never
          {{- if .args.volumes }}
          volumes:
            {{- include "kargo.tplvalues.render" ( dict "value" .args.volumes "context" .context ) | nindent 10 }}
          {{- end }}
{{- end -}}


{{/*
Builds a cronjob to clean specified object storage paths.
@param .context   The caller's context
@param .args      The parameters for the cleaner cronjob. The template expects the following:
  - name                The name to give to the cronjob
  - cron                The schedule expression "0 * * * *"
  - suspend             True to make a suspended by default cronjob (false if not provided)
  - rcloneSecret        The name of the secret where rclone.conf can be found
  - cleanupPaths        A string with all the paths to scan (can be template)
  - olderThanDays       A file must be older than this to be deleted
  - dryRun              A bool to enable dryrun cleanup (will only print matching files)
  - image           An object defining the image to pull, cf. kargo.images.image template
*/}}
{{- define "kargo.rclone-kleaner-cronjob" -}}
apiVersion: {{ .context.Capabilities.APIVersions.Has "batch/v1" | ternary "batch/v1" "batch/v1beta1" }}
kind: CronJob
metadata:
  name: {{ .args.name }}
  namespace: {{ .context.Release.Namespace | quote }}
spec:
  suspend: {{ .args.suspend | default false }}
  schedule: "{{ .args.cron }}"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 3600
      template:
        spec:
          {{- include "kargo.images.pullSecrets" (dict "images" (list .args.image) "context" .context) | indent 10 }}
          containers:
            - name: {{ .args.name }}
              image: {{ include "kargo.images.image" ( dict "imageRoot" .args.image "global" .context ) }}
              command:
                - /bin/sh
              args:
                - -c
                - for CLEANUP_PATH in {{ include "kargo.tplvalues.render" ( dict "value" .args.cleanupPaths "context" .context) }}; do rclone --min-age {{ .args.olderThanDays }}d {{ if default false .args.dryRun }}--dry-run{{ end }} delete $CLEANUP_PATH --rmdirs --verbose; done
              volumeMounts:
                - mountPath: /config/rclone/rclone.conf
                  name: rclone-config
                  subPath: rclone.conf
                  readOnly: true
          restartPolicy: Never
          volumes:
            - name: rclone-config
              secret:
                secretName: {{ include "kargo.tplvalues.render" ( dict "value" .args.rcloneSecret "context" .context) }}
{{- end -}}
