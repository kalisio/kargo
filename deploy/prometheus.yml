version: '3.8'

services:
  prometheus:
    image: ${PROMETHEUS_IMAGE}:${PROMETHEUS_TAG}
    volumes:
      - ./../configs/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 1m
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M
      restart_policy:
        condition: on-failure
    networks:  
      - kargo-back-network
      # access to docker socket is required to use dockerswarm_sd
      - docker-socket-network

  alertmanager:
    image: ${PROMETHEUS_ALERTMANAGER_IMAGE}:${PROMETHEUS_ALERTMANAGER_TAG}
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9093/metrics"]
      interval: 30s
      timeout: 5s
      start_period: 1m     
    volumes:
      - ./../configs/prometheus/:/etc/alertmanager/
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      restart_policy:
        condition: on-failure
    networks:
      - kargo-back-network      


  node-exporter:
    image: ${PROMETHEUS_NODE_EXPORTER_IMAGE}:${PROMETHEUS_NODE_EXPORTER_TAG}
    command:
      - '--path.rootfs=/rootfs'
      # disable all metrics, then enable what we need
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.loadavg'
      - '--collector.meminfo'
      - '--collector.netdev'
      - '--collector.uname'
      # disable node-exporter metrics
      - '--web.disable-exporter-metrics'
    volumes:
      - /:/rootfs:ro,rslave
    # useful so that node_exporter uname metric is correct
    hostname: "{{.Node.Hostname}}"
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      restart_policy:
        condition: on-failure
    networks:
      - kargo-back-network        

  cadvisor:
    image: ${PROMETHEUS_CADVISOR_IMAGE}:${PROMETHEUS_CADVISOR_TAG}
    command:
      - '-docker_only'
      - '-housekeeping_interval=10s'
      # don't fetch all container labels, we'll pick those we need
      - '-store_container_labels=false'
      - '-whitelisted_container_labels=com.docker.swarm.service.name,com.docker.swarm.task.id'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      restart_policy:
        condition: on-failure
    networks:
      - kargo-back-network  
    
  pushgateway:
    image: ${PROMETHEUS_PUSHGATEWAY_IMAGE}:${PROMETHEUS_PUSHGATEWAY_TAG}
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9091/metrics"]
      interval: 25s
      timeout: 3s
      start_period: 30s
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    networks:
      - kargo-back-network  
      
volumes:
  prometheus_data: {}

networks:
  kargo-back-network:
    name: ${DOCKER_BACK_NETWORK}
    external: true
  docker-socket-network:
    name: ${DOCKER_SOCKET_NETWORK}
    external: true
