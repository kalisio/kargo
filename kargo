#!/bin/bash

kargo_version()
{ 
  echo kargo - `jq -r ".version" package.json`
}

kargo_usage()
{
  kargo_version
  printf "usage: kargo [options] <command>\n\n"
  printf "options:\n"
  printf " -v, --version\t print the version and quit\n"
  printf " -h, --help\t print this help and quit\n\n"
  printf "commands:\n"
  printf " %-10s %-30s %s\n" "build" "<service>" "build the given service"  
  printf " %-10s %-30s %s\n" "configure" "" "generate the current configuration"
  printf " %-10s %-30s %s\n" "deploy" "<stack|all> [delay]" "deploy the given stack"
  printf " %-10s %-30s %s\n" "execute" "<script>" "exec the given script"    
  printf " %-10s %-30s %s\n" "info" "" "generate the current configuration"
  printf " %-10s %-30s %s\n" "image" "<load|save> <service>" "load/save the given service from an archive/to an archive"
  printf " %-10s %-30s %s\n" "pull" "" "pull the current workspace"
  printf " %-10s %-30s %s\n" "redeploy" "<stack|all>" "re deploy the given stack"  
  printf " %-10s %-30s %s\n" "remove" "<stack|all>" "remove the given stack"
  printf " %-10s %-30s %s\n" "use" "<workspace>" "select the given workspace"  
  printf "\n"
}

kargo_use()
{
  if [ -z "$1" ]; then 
    echo error: the command \"kargo use\" requires one argument.
    kargo_usage
    exit 1 
  fi
  # check whether the workspace exist
  if [ ! -d "$1" ]; then
    echo error: the specified workspace \"$1\" does not exist.
    exit 1
  fi
  # check whether a configuration has been created already. If yes clean it !
  if [ -d .kargo ]; then
    rm -fr .kargo
  fi
  echo WORKSPACE=$1 > .workspace
  echo switched to workspace \"$1\"
}

kargo_read_workspace()
{
  # check whether a workspace has been defined
  if [ ! -f ".workspace" ]; then
    echo error: no workspace defined
    echo tip: use the command \"kargo use \<workspace\>\" to define the workspace
    exit 1
  fi
  # read the workspace
  set -a
  . ./.workspace
  set +a
}

kargo_read_configuration()
{
  kargo_read_workspace
  # check whether the merged configuration has been made
  if [ ! -d ".kargo" ]; then
    echo error: no merged configuration
    echo tip: use the command \"kargo configure\" to generate the configuration
    exit 1
  fi
  # add kargo specific configuration
  KARGO_USER_ID=`id -u $USER`
  KARGO_GROUP_ID=`id -g $USER`
  # read the configuration
  set -a
  . .kargo/.env.default
  . .kargo/.env
  set +a
}

kargo_check_stack()
{
  if [ -z "$2" ]; then
    echo error: the command \"kargo $1\" requires one argument.
    kargo_usage
    exit 1
  fi
  kargo_read_configuration
  # Retrieve the list of stacks
  if [[ ! $STACKS =~ (^| )$2($| ) ]]; then
    if [ $2 != 'all' ]; then 
      echo error: the specified stack \"$2\" does not exist
      echo tip: use the command \"kargo info\" to list the available stacks
      exit 1
    fi
  fi
}

kargo_update_labels()
{
  local NODES=`docker node ls --format "{{.Hostname}}"`
  for NODE in $NODES; do
    local NODE_NAME=${NODE//-/_}
    local NODE_LABELS_VAR=${NODE_NAME^^}_LABELS
    local NODE_NEW_LABELS=${!NODE_LABELS_VAR}
    local NODE_EXISTING_LABELS=`docker node inspect -f '{{ range $k, $v := .Spec.Labels }}{{ $k }}={{ $v }} {{end}}' $NODE`
    # Keep the existing labels if needed
    for NODE_EXISTING_LABEL in $NODE_EXISTING_LABELS; do
      if [[ ! $NODE_NEW_LABELS =~ $NODE_EXISTING_LABEL ]]; then
        echo Removing $NODE_EXISTING_LABEL from $NODE_NAME
        local NODE_EXISTING_LABEL_KEY=${NODE_EXISTING_LABEL%=*}
        docker node update --label-rm $NODE_EXISTING_LABEL_KEY $NODE > /dev/null
      fi
    done
    # Add the label of needed
    for NODE_NEW_LABEL in $NODE_NEW_LABELS; do
      if [[ ! $NODE_EXISTING_LABELS =~ $NODE_NEW_LABEL ]]; then
        echo Adding $NODE_NEW_LABEL to $NODE_NAME
        docker node update --label-add $NODE_NEW_LABEL $NODE > /dev/null
      fi
    done
  done
}

kargo_configure()
{
  kargo_read_workspace
  # ensure the logs directory exists
  mkdir -p .kargo/logs
  # ensure the acme directory exists
  mkdir -p .kargo/acme
  # copy acme.json if required
  if [ ! -f .kargo/acme/acme.json ]; then
    if [ -f "$WORKSPACE"/acme.json ]; then
      cp "$WORKSPACE"/acme.json .kargo/acme/.
      chmod 600 .kargo/acme/acme.json
    fi
  fi
  # copy environment files
  cp .env.default .kargo/.env.default
  cp "$WORKSPACE"/.env .kargo/.
  kargo_read_configuration
  # build a temporary configuration to facilitate the synchronization
  mkdir -p .tmp
  cp -R ./build  .tmp/.
  cp -R ./scripts .tmp/.
  cp -R ./deploy .tmp/.
  cp -R ./configs .tmp/.
  if [ -d "$WORKSPACE"/build ]; then
    cp -R "$WORKSPACE"/build .tmp/.
  fi
  if [ -d "$WORKSPACE"/scripts ]; then
    cp -R "$WORKSPACE"/scripts .tmp/.
  fi
  if [ -d "$WORKSPACE"/deploy ]; then
    cp -R "$WORKSPACE"/deploy .tmp/.
  fi
  if [ -d "$WORKSPACE"/configs ]; then
    cp -R "$WORKSPACE"/configs .tmp/.
  fi
  # template the require configuration files
  local TEMPLATES=`find .tmp/configs -name "*.tpl"`
  for TEMPLATE in $TEMPLATES; do
    envsubst < $TEMPLATE > ${TEMPLATE%.*}
  done
  # synchronize the configuration
  rsync -au --delete .tmp/build .kargo/
  rsync -au --delete .tmp/scripts .kargo/
  rsync -au --delete .tmp/deploy .kargo/
  rsync -au --delete .tmp/configs .kargo/
  rm -fr .tmp
  kargo_update_labels
  echo workspace \"$WORKSPACE\" ready.
}

kargo_pull()
{
  kargo_read_workspace
  pushd $WORKSPACE > /dev/null
  git pull
  popd > /dev/null
}

kargo_info()
{
  kargo_read_configuration
  echo current user id/group id: $KARGO_USER_ID/$KARGO_GROUP_ID
  echo current workspace is: \"$WORKSPACE\"
  echo available stacks are:
  for STACK in $STACKS; do
    local STACK_NAME=${STACK^^}_STACK
    local STACK_CONTENT=${!STACK_NAME}
    printf " %-15s %s\n" $STACK "$STACK_CONTENT"
  done
}

kargo_image_load()
{
  kargo_read_configuration
  # check whether an agument is provided
  if [ -z "$1" ]; then
    echo error: the command \"kargo image load\" requires one argument.
    kargo_usage
    exit 1
  fi
  local SERVICE_NAME=${1^^}
  SERVICE_NAME=${SERVICE_NAME//-/_}
  # Is there any archive to import ?
  local ARCHIVE_VAR=${SERVICE_NAME}_ARCHIVE
  local ARCHIVE=${!ARCHIVE_VAR}
  if [ "$ARCHIVE" == "" ]; then
    echo error: you must define the variable \"$ARCHIVE_VAR\" to set the archive to be imported
    exit 1
  fi
  # do we need to copy the archive first ?
  local STORE_PATTERN=".*:.*"
  local HTTP_PATTERN="^http(s?)://.*"
  if [[ "$ARCHIVE" =~ $STORE_PATTERN ]] && [[ ! "$ARCHIVE" =~ $HTTP_PATTERN ]]; then
    echo copying $ARCHIVE
    local LOCAL_ARCHIVE=${ARCHIVE//:/_}
    local LOCAL_ARCHIVE_NAME=`basename $LOCAL_ARCHIVE`
    rclone copyto $ARCHIVE archives/$LOCAL_ARCHIVE_NAME
    ARCHIVE=archives/$LOCAL_ARCHIVE_NAME
  fi
  # load the archive
  echo loading $ARCHIVE
  local ARCHIVE_IMAGE_TAG=`docker load < $ARCHIVE` 
  # retrieve the source image and the source tag
  local REGEXP="Loaded image: (.*):(.*)"
  [[ "$ARCHIVE_IMAGE_TAG" =~ $REGEXP ]]
  local ARCHIVE_IMAGE="${BASH_REMATCH[1]}"
  local TAG="${BASH_REMATCH[2]}"
  if [ "$ARCHIVE_IMAGE" == "" ] || [ "$TAG" == "" ]; then
    echo error: an error has occured while loading archive \"$ARCHIVE\"
    exit 1
  fi
  echo -e "  $ARCHIVE_IMAGE:$TAG loaded"
  # tag and push the loaded image
  docker tag $ARCHIVE_IMAGE:$TAG localhost:5000/$ARCHIVE_IMAGE:$TAG
  docker push localhost:5000/$ARCHIVE_IMAGE:$TAG
  # declare variable for deployment
  export ${SERVICE_NAME}_IMAGE=localhost:5000/$ARCHIVE_IMAGE
  export ${SERVICE_NAME}_TAG=$TAG
}

kargo_image_save()
{
  kargo_read_configuration
  # check whether an agument is provided
  if [ -z $1 ]; then
    echo error: the command \"kargo image save\" requires one argument.
    kargo_usage
    exit 1
  fi
  local SERVICE_NAME=${1^^}
  SERVICE_NAME=${SERVICE_NAME//-/_}
  # Check whether it is already an archive
  local SERVICE_ARCHIVE_NAME=${SERVICE_NAME}_ARCHIVE
  local SERVICE_ARCHIVE=${!SERVICE_ARCHIVE_NAME}
  if [ "$SERVICE_ARCHIVE" == "" ]; then
    local SERVICE_REPOSITORY_NAME=${SERVICE_NAME}_IMAGE
    local SERVICE_REPOSITORY=${!SERVICE_REPOSITORY_NAME}
    local SERVICE_TAG_NAME=${SERVICE_NAME}_TAG
    local SERVICE_TAG=${!SERVICE_TAG_NAME}
    local LOCAL_REPOSITORY_PATTERN="localhost:5000/(.*)"
    [[ "$SERVICE_REPOSITORY" =~ $LOCAL_REPOSITORY_PATTERN ]]
    local LOCAL_SERVICE_NAME="${BASH_REMATCH[1]}"
    if [ ! -z "$LOCAL_SERVICE_NAME" ]; then
      docker tag ${SERVICE_REPOSITORY}:${SERVICE_TAG} ${LOCAL_SERVICE_NAME}:${SERVICE_TAG} 
      SERVICE_REPOSITORY=${LOCAL_SERVICE_NAME}
    else
      docker pull ${SERVICE_REPOSITORY}:${SERVICE_TAG}
    fi 
    local ARCHIVE_NAME=${SERVICE_REPOSITORY//\//.}
    docker save ${SERVICE_REPOSITORY}:${SERVICE_TAG} | gzip > archives/${ARCHIVE_NAME}_${SERVICE_TAG}.tar.gz
  fi
}

kargo_image() 
{
  case $1 in
    load) kargo_image_load "$2";;
    save) kargo_image_save "$2";;
    *) kargo_usage
  esac
}

kargo_build()
{
  kargo_read_configuration
  # check whether an agument is provided
  if [ -z "$1" ]; then
    echo error: the command \"kargo build\" requires one argument.
    kargo_usage
    exit 1
  fi
  # check whethet the argument is valid
  local SERVICE=$1.sh
  if [ ! -f ".kargo/build/$SERVICE" ]; then
    echo error: the specified service \"$1\" does not exist
    echo tip: use the commande \"kargo info\" to list the services to build
    exit 1
  fi
  pushd .kargo/build > /dev/null
  source ./$SERVICE
  popd > /dev/null
}

kargo_exec()
{
  kargo_read_configuration
  # check whether an agument is provided
  if [ -z "$1" ]; then
    echo error: the command \"kargo exec\" requires one argument.
    kargo_usage
    exit 1
  fi
  # check whethet the argument is valid
  local SCRIPT=$1.sh
  if [ ! -f ".kargo/scripts/$SCRIPT" ]; then
    echo error: the specified script \"$1\" does not exist
    echo tip: use the commande \"kargo info\" to list the available scripts
    exit 1
  fi
  pushd .kargo/scripts > /dev/null
  source ./$SCRIPT $2
  popd > /dev/null
}

kargo_deploy()
{
  kargo_check_stack deploy $1
  if [ $1 == 'all' ]; then
    local DELAY=${2:-5}
    for STACK in $STACKS; do
      echo deploying $STACK stack
      kargo_deploy $STACK
      echo waiting for $DELAY seconds
      sleep $DELAY
    done
  else
    # check whether the networks exist or not.
    local EXISTING_DOCKER_SOCKET_NETWORK=`docker network ls -q --filter name=^$DOCKER_SOCKET_NETWORK\$`
    if [ -z "$EXISTING_DOCKER_SOCKEt_NETWORK" ]; then
      docker network create -d overlay --attachable $DOCKER_SOCKET_NETWORK
    fi
    local EXISTING_DOCKER_FRONT_NETWORK=`docker network ls -q --filter name=^$DOCKER_FRONT_NETWORK\$`
    if [ -z "$EXISTING_DOCKER_FRONT_NETWORK" ]; then
      docker network create -d overlay --attachable $DOCKER_FRONT_NETWORK
    fi
    local EXISTING_DOCKER_BACK_NETWORK=`docker network ls -q --filter name=^$DOCKER_BACK_NETWORK\$`
    if [ -z "$EXISTING_DOCKER_BACK_NETWORK" ]; then
      docker network create -d overlay --attachable $DOCKER_BACK_NETWORK
    fi
    # deploy the stack
    local STACK_NAME=${1^^}_STACK
    local STACK=${!STACK_NAME}
    local SERVICES_TO_DEPLOY=
    for SERVICE in $STACK; do
      echo initializing service $SERVICE
      SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY -c deploy/$SERVICE.yml"
      local SERVICE_NAME=${SERVICE//-/_} # replace '-' by '_'
      SERVICE_NAME=${SERVICE_NAME^^} # change to uppercase
      local SERVICE_ARCHIVE_NAME=${SERVICE_NAME}_ARCHIVE
      local SERVICE_ARCHIVE=${!SERVICE_ARCHIVE_NAME}
      if [ "$SERVICE_ARCHIVE" != "" ]; then
        kargo_image_load $SERVICE
      fi
      local SERVICE_EXTENSION_NAME=${SERVICE_NAME}_EXTENSION
      local SERVICE_EXTENSION=${!SERVICE_EXTENSION_NAME}
      if [ "$SERVICE_EXTENSION" != "" ]; then
        SERVICES_TO_DEPLOY="$SERVICES_TO_DEPLOY -c deploy/$SERVICE_EXTENSION.yml"
      fi
    done
    pushd .kargo > /dev/null
    docker stack deploy  --with-registry-auth $SERVICES_TO_DEPLOY kargo-$1
    popd > /dev/null
  fi
}

kargo_redeploy()
{
  kargo_check_stack redeploy $1
  kargo_remove $1
  kargo_configure
  kargo_deploy $1
}

kargo_remove()
{
  kargo_check_stack remove $1
  if [ $1 == 'all' ]; then 
    local INVERSED_STACKS=
    for STACK in $STACKS; do
      INVERSED_STACKS="$STACK $INVERSED_STACKS"
    done
    for STACK in $INVERSED_STACKS; do
      echo removing $STACK stack
      kargo_remove $STACK
    done
  else
    docker stack rm kargo-$1
  fi
}


case $1 in
  -v|--version) kargo_version;;
  -h|--help) kargo_usage;;
  build) kargo_build "$2";;
  configure) kargo_configure;;
  deploy) kargo_deploy "$2" "$3";;
  exec) kargo_exec "$2" "$3";;
  info) kargo_info;;
  image) kargo_image "$2" "$3";;
  pull) kargo_pull;;
  redeploy) kargo_redeploy "$2";;  
  remove) kargo_remove "$2";;
  use) kargo_use "$2";;
  *) kargo_usage
esac


