(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{529:function(e,a,s){"use strict";s.r(a);var t=s(13),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"containers-charts-and-kubernetes-best-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#containers-charts-and-kubernetes-best-practices"}},[e._v("#")]),e._v(" Containers, charts and kubernetes best practices")]),e._v(" "),s("p",[e._v("We run docker images through kubernetes, which mean we have some helm chart.")]),e._v(" "),s("h2",{attrs:{id:"docker-image-best-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-image-best-practices"}},[e._v("#")]),e._v(" Docker image best practices")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Prefer -slim images as base and use multi stage builds to reduce image sizes")])]),e._v(" "),s("li",[s("p",[e._v("Make your docker image run as unpriviliged user")]),e._v(" "),s("ul",[s("li",[e._v("If it's node based, and using a node image as base, there's a 'node' user (uid 1000) already available\n"),s("ul",[s("li",[e._v("Copy app's files using COPY --chown node")]),e._v(" "),s("li",[e._v("Make your command run as 'node' user")])])]),e._v(" "),s("li",[e._v("If there's no preinstalled user, create one and use it")])])]),e._v(" "),s("li",[s("p",[e._v("Since it'll run as unpriviliged user, if you need to open ports, make sure they're >= 1024")])]),e._v(" "),s("li",[s("p",[e._v("Snippet to install stuff with apt and clean afterwards")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("RUN \\\n  DEBIAN_FRONTEND=noninteractive && \\\n  apt-get update && \\\n  apt-get --no-install-recommends --yes install \\\n    openjdk-11-jre-headless \\\n    ca-certificates \\\n    gdal-bin && \\\n  apt-get clean && \\\n  rm -rf /var/lib/apt/lists/*\n")])])]),s("ul",[s("li",[e._v("Snippet to install stuff with yarn and clean afterwards")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("RUN \\\n  yarn global add @weacast/grib2json@${GRIB2JSON_TAG} && \\\n  chmod a+x /usr/local/share/.config/yarn/global/node_modules/@weacast/grib2json/bin/grib2json && \\\n  yarn cache clean\n")])])]),s("h2",{attrs:{id:"helm-charts-best-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helm-charts-best-practices"}},[e._v("#")]),e._v(" Helm charts best practices")]),e._v(" "),s("ul",[s("li",[e._v("Define appVersion to the docker image tag it's supposed to pull (no latest in defined charts, latest can be specified using values.yaml in infra definition)")]),e._v(" "),s("li",[e._v("Include configurable resource requests & limits")]),e._v(" "),s("li",[e._v("Include configurable security context and put sensible defaults in chart's values.yaml")]),e._v(" "),s("li",[e._v("If it's being deployed on some preprod infra, then chart version should be at least 1.0.0")])]),e._v(" "),s("h2",{attrs:{id:"infrastructure-management-best-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure-management-best-practices"}},[e._v("#")]),e._v(" Infrastructure management best practices")]),e._v(" "),s("ul",[s("li",[e._v("Local charts must not depend on 0.0.0-dev charts when infra is != from staging/dev")])]),e._v(" "),s("h2",{attrs:{id:"howto-version-docker-images"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#howto-version-docker-images"}},[e._v("#")]),e._v(" Howto version docker images")]),e._v(" "),s("ul",[s("li",[e._v("kargo specific container images (tileservergl & friends ...)\n"),s("ul",[s("li",[e._v("[build app-name tag]")])])]),e._v(" "),s("li",[e._v("kapture yarn release:[major,minor,patch]")]),e._v(" "),s("li",[e._v("k-hubeau-* yarn release:[major,minor,patch]")])]),e._v(" "),s("h2",{attrs:{id:"howto-version-helm-charts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#howto-version-helm-charts"}},[e._v("#")]),e._v(" Howto version helm charts")]),e._v(" "),s("ul",[s("li",[e._v("[pack] in commit message => will regenerate all 0.0.0-dev charts")]),e._v(" "),s("li",[e._v("yarn release:charts:[major,minor,patch] => will make a new tagged release\n"),s("ul",[s("li",[e._v("if given a glob patten, will only release matching charts")])])])]),e._v(" "),s("h2",{attrs:{id:"known-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#known-issues"}},[e._v("#")]),e._v(" Known issues")]),e._v(" "),s("h2",{attrs:{id:"open-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#open-issues"}},[e._v("#")]),e._v(" Open issues")]),e._v(" "),s("ul",[s("li",[e._v("would be nice to forbid pushing over a tag that already exists (container, chart), except latest\n"),s("ul",[s("li",[e._v("if needed, remove tag from dockerhub, harbor, whatever and then push")])])]),e._v(" "),s("li",[e._v("would be nice for charts if touching version makes a release")]),e._v(" "),s("li",[e._v("document per project how to release")]),e._v(" "),s("li",[e._v("what if ci fails and is triggered using commit message ?")]),e._v(" "),s("li",[e._v("what if ci fails and is triggered using version bump in package.json ?")]),e._v(" "),s("li",[e._v("is it possible to pack a chart using version-SNAPSHOT or something ?")])])])}),[],!1,null,null,null);a.default=r.exports}}]);